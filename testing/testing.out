# ETHAN CHEN, BANSHAREE IREEN, JEFFREY JIANG
# testing.sh - integration testing for sudoku module

touch ../tables/easyTable.txt
touch ../tables/hardTable.txt
touch ../tables/valgrindTable.txt
touch ../tables/easy16.txt
touch ../tables/hard16.txt


# VALID TESTS
# test 1:creating a board on easy mode
../sudoku/sudoku create easy > ../tables/easyTable.txt

# test 2: creating a board on hard mode
../sudoku/sudoku create hard > ../tables/hardTable.txt

# test 3: solving the board made by test 1
../sudoku/sudoku solve easy < ../tables/easyTable.txt
Original Board: 
----------------------------------
|  1  0  9 |  0  3  0 |  7  4  5 | 
|  8  0  0 |  0  7  4 |  0  2  0 | 
|  7  0  5 |  0  2  0 |  0  0  6 | 
----------------------------------
|  2  0  8 |  0  0  0 |  0  0  0 | 
|  0  0  7 |  0  0  2 |  4  1  0 | 
|  3  9  4 |  0  0  8 |  0  0  0 | 
----------------------------------
|  4  5  0 |  0  0  0 |  0  8  2 | 
|  0  0  2 |  4  0  0 |  5  9  0 | 
|  9  8  0 |  2  0  1 |  6  0  0 | 
----------------------------------
Solved: 
----------------------------------
|  1  2  9 |  8  3  6 |  7  4  5 | 
|  8  3  6 |  5  7  4 |  1  2  9 | 
|  7  4  5 |  1  2  9 |  8  3  6 | 
----------------------------------
|  2  1  8 |  7  4  5 |  9  6  3 | 
|  5  6  7 |  3  9  2 |  4  1  8 | 
|  3  9  4 |  6  1  8 |  2  5  7 | 
----------------------------------
|  4  5  1 |  9  6  7 |  3  8  2 | 
|  6  7  2 |  4  8  3 |  5  9  1 | 
|  9  8  3 |  2  5  1 |  6  7  4 | 
----------------------------------

# test 4: solving the board made by test 2
../sudoku/sudoku solve hard < ../tables/easyTable.txt
Original Board: 
----------------------------------
|  1  0  9 |  0  3  0 |  7  4  5 | 
|  8  0  0 |  0  7  4 |  0  2  0 | 
|  7  0  5 |  0  2  0 |  0  0  6 | 
----------------------------------
|  2  0  8 |  0  0  0 |  0  0  0 | 
|  0  0  7 |  0  0  2 |  4  1  0 | 
|  3  9  4 |  0  0  8 |  0  0  0 | 
----------------------------------
|  4  5  0 |  0  0  0 |  0  8  2 | 
|  0  0  2 |  4  0  0 |  5  9  0 | 
|  9  8  0 |  2  0  1 |  6  0  0 | 
----------------------------------
Solved: 
----------------------------------
|  1  2  9 |  8  3  6 |  7  4  5 | 
|  8  3  6 |  5  7  4 |  1  2  9 | 
|  7  4  5 |  1  2  9 |  8  3  6 | 
----------------------------------
|  2  1  8 |  7  4  5 |  9  6  3 | 
|  5  6  7 |  3  9  2 |  4  1  8 | 
|  3  9  4 |  6  1  8 |  2  5  7 | 
----------------------------------
|  4  5  1 |  9  6  7 |  3  8  2 | 
|  6  7  2 |  4  8  3 |  5  9  1 | 
|  9  8  3 |  2  5  1 |  6  7  4 | 
----------------------------------

# test 5: creating 16x16 on easy board 
../sudoku/sudoku create easy 16 > ../tables/easy16.txt

# test 6: creating 16x16 board on hard mode
../sudoku/sudoku create hard 16 > ../tables/hard16.txt

# test 7: solving the board made by test 5
../sudoku/sudoku solve easy 16 < ../tables/easy16.txt
Error: format of input file is incorrect

# test 8: solving the board made by test 6
../sudoku/sudoku solve hard 16 < ../tables/hard16.txt
Error: format of input file is incorrect


# INVALID INPUTS

# invalid mode
../sudoku/sudoku wrong easy
Please select a valid mode: create or solve.

# invalid difficulty
../sudoku/sudoku create wrong
Please select a valid level of difficulty: easy or hard.

# 3rd argument can only be dimension
../sudoku/sudoku create easy nonIntArg
Dimension can be either 4, 9 or 16.

# using invalid dimension
../sudoku/sudoku solve hard 10
Dimension can be either 4, 9 or 16.


# SOLVABILITY
# trying to solve a known unsolvable board
../sudoku/sudoku solve easy < ../tables/unsolvableTable.txt
5 already exists in row
5 already exists in col
5 already exists in box
Invalid board
Could not solve board
Original Board: 
----------------------------------
|  5  1  6 |  8  4  5 |  7  3  2 | 
|  3  0  7 |  6  0  5 |  0  0  0 | 
|  8  0  9 |  7  0  0 |  0  6  5 | 
----------------------------------
|  1  3  5 |  0  6  0 |  9  0  7 | 
|  4  7  2 |  5  9  1 |  0  0  6 | 
|  9  6  8 |  3  7  0 |  0  5  0 | 
----------------------------------
|  2  5  3 |  1  8  6 |  0  7  4 | 
|  6  8  4 |  2  0  7 |  5  0  0 | 
|  7  9  1 |  0  5  0 |  6  0  8 | 
----------------------------------

# VALGRIND TESTS
# checking for memory leaks on create mode
valgrind --leak-check=full --show-leak-kinds=all ../sudoku/sudoku create easy > ../tables/valgrindTable.txt
==6439== Memcheck, a memory error detector
==6439== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==6439== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==6439== Command: ../sudoku/sudoku create easy
==6439== 
==6439== 
==6439== HEAP SUMMARY:
==6439==     in use at exit: 510 bytes in 33 blocks
==6439==   total heap usage: 4,005 allocs, 3,972 frees, 93,066 bytes allocated
==6439== 
==6439== 72 bytes in 3 blocks are indirectly lost in loss record 1 of 7
==6439==    at 0x4C33B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6439==    by 0x109412: generate (creator.c:103)
==6439==    by 0x1090D8: generateUniqueTable (creator.c:28)
==6439==    by 0x108F6E: createTable (sudoku.c:121)
==6439==    by 0x108F00: main (sudoku.c:95)
==6439== 
==6439== 90 bytes in 9 blocks are indirectly lost in loss record 2 of 7
==6439==    at 0x4C33B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6439==    by 0x10933C: generate (creator.c:92)
==6439==    by 0x1090D8: generateUniqueTable (creator.c:28)
==6439==    by 0x108F6E: createTable (sudoku.c:121)
==6439==    by 0x108F00: main (sudoku.c:95)
==6439== 
==6439== 90 bytes in 9 blocks are indirectly lost in loss record 3 of 7
==6439==    at 0x4C33B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6439==    by 0x1093AA: generate (creator.c:98)
==6439==    by 0x1090D8: generateUniqueTable (creator.c:28)
==6439==    by 0x108F6E: createTable (sudoku.c:121)
==6439==    by 0x108F00: main (sudoku.c:95)
==6439== 
==6439== 90 bytes in 9 blocks are indirectly lost in loss record 4 of 7
==6439==    at 0x4C33B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6439==    by 0x109465: generate (creator.c:105)
==6439==    by 0x1090D8: generateUniqueTable (creator.c:28)
==6439==    by 0x108F6E: createTable (sudoku.c:121)
==6439==    by 0x108F00: main (sudoku.c:95)
==6439== 
==6439== 162 (72 direct, 90 indirect) bytes in 1 blocks are definitely lost in loss record 5 of 7
==6439==    at 0x4C33B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6439==    by 0x1092FB: generate (creator.c:90)
==6439==    by 0x1090D8: generateUniqueTable (creator.c:28)
==6439==    by 0x108F6E: createTable (sudoku.c:121)
==6439==    by 0x108F00: main (sudoku.c:95)
==6439== 
==6439== 162 (72 direct, 90 indirect) bytes in 1 blocks are definitely lost in loss record 6 of 7
==6439==    at 0x4C33B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6439==    by 0x109369: generate (creator.c:96)
==6439==    by 0x1090D8: generateUniqueTable (creator.c:28)
==6439==    by 0x108F6E: createTable (sudoku.c:121)
==6439==    by 0x108F00: main (sudoku.c:95)
==6439== 
==6439== 186 (24 direct, 162 indirect) bytes in 1 blocks are definitely lost in loss record 7 of 7
==6439==    at 0x4C33B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6439==    by 0x1093D4: generate (creator.c:101)
==6439==    by 0x1090D8: generateUniqueTable (creator.c:28)
==6439==    by 0x108F6E: createTable (sudoku.c:121)
==6439==    by 0x108F00: main (sudoku.c:95)
==6439== 
==6439== LEAK SUMMARY:
==6439==    definitely lost: 168 bytes in 3 blocks
==6439==    indirectly lost: 342 bytes in 30 blocks
==6439==      possibly lost: 0 bytes in 0 blocks
==6439==    still reachable: 0 bytes in 0 blocks
==6439==         suppressed: 0 bytes in 0 blocks
==6439== 
==6439== For counts of detected and suppressed errors, rerun with: -v
==6439== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)

# checking for memory leaks on solve mode
valgrind --leak-check=full --show-leak-kinds=all ../sudoku/sudoku solve easy < ../tables/valgrindTable.txt
==6441== Memcheck, a memory error detector
==6441== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==6441== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==6441== Command: ../sudoku/sudoku solve easy
==6441== 
Original Board: 
----------------------------------
|  0  6  0 |  9  2  1 |  3  0  0 | 
|  0  0  0 |  0  5  8 |  0  0  7 | 
|  3  0  8 |  4  0  6 |  1  9  0 | 
----------------------------------
|  6  0  0 |  2  0  0 |  0  8  5 | 
|  2  0  0 |  0  0  0 |  0  4  9 | 
|  0  8  0 |  0  0  9 |  0  1  0 | 
----------------------------------
|  0  0  0 |  5  0  7 |  8  3  1 | 
|  1  3  0 |  0  9  0 |  5  0  0 | 
|  8  7  0 |  1  3  0 |  0  0  0 | 
----------------------------------
Solved: 
----------------------------------
|  7  6  4 |  9  2  1 |  3  5  8 | 
|  9  2  1 |  3  5  8 |  4  6  7 | 
|  3  5  8 |  4  7  6 |  1  9  2 | 
----------------------------------
|  6  4  9 |  2  1  3 |  7  8  5 | 
|  2  1  3 |  7  8  5 |  6  4  9 | 
|  5  8  7 |  6  4  9 |  2  1  3 | 
----------------------------------
|  4  9  2 |  5  6  7 |  8  3  1 | 
|  1  3  6 |  8  9  2 |  5  7  4 | 
|  8  7  5 |  1  3  4 |  9  2  6 | 
----------------------------------
==6441== 
==6441== HEAP SUMMARY:
==6441==     in use at exit: 0 bytes in 0 blocks
==6441==   total heap usage: 47 allocs, 47 frees, 17,338 bytes allocated
==6441== 
==6441== All heap blocks were freed -- no leaks are possible
==6441== 
==6441== For counts of detected and suppressed errors, rerun with: -v
==6441== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

exit 0
